//
// **** AUTOMATICALLY GENERATED BY mknodedecls.pl -- DO NOT EDIT ****
//
#ifdef __NODE_DECLARATIONS_ONLY__

//---------------------------------------------------------------------------
//     THESE ARE PREDEFINED NODES, AVAILABLE FROM THE CDK
//---------------------------------------------------------------------------

namespace cdk {
  namespace node {
    class Node;  class Nil;  class Data;  class Composite;  class Sequence;
    namespace expression {
      template <class T> class Simple;
      class Double;  class Integer;  class String;  class Identifier;
      class UnaryExpression;
      class NEG;
      class BinaryExpression;
      class ADD;  class SUB;  class MUL;  class DIV;  class MOD;
      class LT;   class LE;   class GE;   class GT;   class EQ;   class NE;
    }
  } // namespace node
} // namespace cdk

//---------------------------------------------------------------------------
//     THESE ARE THE NODES DEFINED SPECIFICALLY FOR THIS APPLICATION
//---------------------------------------------------------------------------

namespace tll {
namespace node { class PublicNode; } 
namespace node { class AssignmentNode; } 
namespace node { class FunctionDeclNode; } 
namespace node { class VariableNode; } 
namespace node { class UseNode; } 
namespace node { namespace instructions { class IfElseNode; } } 
namespace node { namespace instructions { class StopNode; } } 
namespace node { namespace instructions { class DoElseNode; } } 
namespace node { namespace instructions { class ForVarNode; } } 
namespace node { namespace instructions { class WhileElseNode; } } 
namespace node { namespace instructions { class WhileNode; } } 
namespace node { namespace instructions { class IfNode; } } 
namespace node { namespace instructions { class ForNode; } } 
namespace node { namespace instructions { class DoNode; } } 
namespace node { namespace instructions { class ReturnNode; } } 
namespace node { namespace instructions { class NextNode; } } 
namespace node { class QualifierNode; } 
namespace node { class PrintNode; } 
namespace node { class FunctionDefNode; } 
namespace node { namespace expression { class SIMETRIC; } } 
namespace node { namespace expression { class IndexNode; } } 
namespace node { namespace expression { class MEM; } } 
namespace node { namespace expression { class LoadValue; } } 
namespace node { namespace expression { class InvocationNode; } } 
namespace node { namespace expression { class AND; } } 
namespace node { namespace expression { class POT; } } 
namespace node { namespace expression { class ReadNode; } } 
namespace node { namespace expression { class LeftValue; } } 
namespace node { namespace expression { class POS; } } 
namespace node { namespace expression { class FunctionCallNode; } } 
namespace node { namespace expression { class OR; } } 
namespace node { class BlockNode; } 
} // namespace tll

//---------------------------------------------------------------------------
//     A L I A S E S
//---------------------------------------------------------------------------

// make sure the "semantics" namespace is known
namespace tll { namespace semantics {} }

#else /* !defined(__NODE_DECLARATIONS_ONLY__) */

#ifndef __AUTOMATIC_NODE_ALLNODES_H__
#define __AUTOMATIC_NODE_ALLNODES_H__

//---------------------------------------------------------------------------
//     THESE ARE PREDEFINED NODES, AVAILABLE FROM THE CDK
//---------------------------------------------------------------------------

#include <cdk/nodes/Node.h>
#include <cdk/nodes/Data.h>
#include <cdk/nodes/Nil.h>
#include <cdk/nodes/Composite.h>
#include <cdk/nodes/Sequence.h>

#include <cdk/nodes/expressions/Integer.h>
#include <cdk/nodes/expressions/Double.h>
#include <cdk/nodes/expressions/String.h>
#include <cdk/nodes/expressions/Identifier.h>
#include <cdk/nodes/expressions/NEG.h>
#include <cdk/nodes/expressions/ADD.h>
#include <cdk/nodes/expressions/SUB.h>
#include <cdk/nodes/expressions/MUL.h>
#include <cdk/nodes/expressions/DIV.h>
#include <cdk/nodes/expressions/MOD.h>
#include <cdk/nodes/expressions/LT.h>
#include <cdk/nodes/expressions/GT.h>
#include <cdk/nodes/expressions/GE.h>
#include <cdk/nodes/expressions/LE.h>
#include <cdk/nodes/expressions/NE.h>
#include <cdk/nodes/expressions/EQ.h>

//---------------------------------------------------------------------------
//     THESE ARE THE NODES DEFINED SPECIFICALLY FOR THIS APPLICATION
//---------------------------------------------------------------------------

#include "nodes/PublicNode.h"
#include "nodes/AssignmentNode.h"
#include "nodes/FunctionDeclNode.h"
#include "nodes/VariableNode.h"
#include "nodes/UseNode.h"
#include "nodes/instructions/IfElseNode.h"
#include "nodes/instructions/StopNode.h"
#include "nodes/instructions/DoElseNode.h"
#include "nodes/instructions/ForVarNode.h"
#include "nodes/instructions/WhileElseNode.h"
#include "nodes/instructions/WhileNode.h"
#include "nodes/instructions/IfNode.h"
#include "nodes/instructions/ForNode.h"
#include "nodes/instructions/DoNode.h"
#include "nodes/instructions/ReturnNode.h"
#include "nodes/instructions/NextNode.h"
#include "nodes/QualifierNode.h"
#include "nodes/PrintNode.h"
#include "nodes/FunctionDefNode.h"
#include "nodes/expression/SIMETRIC.h"
#include "nodes/expression/IndexNode.h"
#include "nodes/expression/MEM.h"
#include "nodes/expression/LoadValue.h"
#include "nodes/expression/InvocationNode.h"
#include "nodes/expression/AND.h"
#include "nodes/expression/POT.h"
#include "nodes/expression/ReadNode.h"
#include "nodes/expression/LeftValue.h"
#include "nodes/expression/POS.h"
#include "nodes/expression/FunctionCallNode.h"
#include "nodes/expression/OR.h"
#include "nodes/BlockNode.h"


//---------------------------------------------------------------------------
//     A L I A S E S
//---------------------------------------------------------------------------

// make sure the "semantics" namespace is known
namespace tll { namespace semantics {} }

//---------------------------------------------------------------------------
//     T H E    E N D
//---------------------------------------------------------------------------

#endif /* !defined(__AUTOMATIC_NODE_ALLNODES_H__) */

#endif /* !defined(__NODE_DECLARATIONS_ONLY__) */
