// $Id: FlexBYACC.h,v 1.1 2012-03-06 21:44:34 ist13500 Exp $ -*- c++ -*-
/*
 * $Log: FlexBYACC.h,v $
 * Revision 1.1  2012-03-06 21:44:34  ist13500
 * This is actually Compact but renamed TLL (string level change).
 * The recognized language is still Compact, not TLL.
 *
 * Revision 1.4  2009/03/15 19:21:15  david
 * First public revision of the CDK4-based TLL compiler.
 * Revision logs were cleaned.
 *
 * Revision 1.3  2009/03/02 20:16:13  david
 * Corrected stupid recursion bug.
 *
 * Revision 1.2  2009/03/02 17:40:22  david
 * Major changes: in addition to compiling with CDK4, TLL now has
 * its own namespace (tll). All classes are defined in it or in its
 * child namespaces. Added automatic node processing: the "nodes"
 * directory is scanned and nodes/all.h is built (contains both forward
 * declarations and include directives for all nodes -- in the appropriate
 * namespaces).
 *
 * Revision 1.1  2009/02/20 06:04:35  david
 * TLL in new version. The new CDK is independent from particular
 * tools (such as Flex and BYACC). Must adapt. This is the first version
 * and will probably change.
 *
 */
#ifndef __TLL_FLEXBYACCPARSER_H__
#define __TLL_FLEXBYACCPARSER_H__

#include <iostream>
#include <cdk/Compiler.h>
#include <cdk/syntax/Parser.h>

#include "TLLScanner.h"

namespace tll {
  namespace syntax {

    /**
     * This class corresponds to the parser as implemented by the pair
     * Flex+BYACC. Together, they scan the input and build the syntax
     * treee.
     * @see cdk::syntax::Parser
     * @see cdk::Compiler
     */
    class FlexBYACC: public cdk::syntax::Parser {

      cdk::Compiler *_compiler;

      //! @var _scanner is a global reference to the scanner (used to (re)set i/o streams)
      FlexLexer *_scanner;

    public:
      // constructors

      /**
       * Constructor: the constructor does the same as the superclass'
       * @param name compiler name
       * @param scanner the lexical analyser
       */
      FlexBYACC(const char *toolset = "flex+byacc") :
        cdk::syntax::Parser(toolset), _scanner(NULL) {
      }

    public:
      inline FlexLexer *scanner() {
        return _scanner;
      }
      inline void scanner(FlexLexer *scanner) {
        _scanner = scanner;
        switchStreams();
      }

      /**
       * Update the scanner's input and output streams.
       */
      void switchStreams() {
        _scanner->switch_streams(&istream(), &ostream());
      }

    public:
      // methods

      int parse(cdk::Compiler *compiler) {
        _compiler = compiler;
        return yyparse();
      }

      void yyerror(const char * const s) const {
        std::cerr << _scanner->lineno() << ": " << s << std::endl;
      }

      /**
       * Scanner.
       */
      int yylex() {
        return _scanner->yylex();
      }

      /**
       * This is the main parsing function.
       * It is automatically generated by 'byacc'
       */
      int yyparse();

    };

  } // namespace syntax
} // namespace tll

#endif
